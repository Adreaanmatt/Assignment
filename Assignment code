>>> tesla_data.reset_index(inplace=True)
>>> tesla_data.head()
                       Date      Open      High       Low     Close     Volume  Dividends  Stock Splits
0 2010-06-29 00:00:00-04:00  1.266667  1.666667  1.169333  1.592667  281494500        0.0           0.0
1 2010-06-30 00:00:00-04:00  1.719333  2.028000  1.553333  1.588667  257806500        0.0           0.0
2 2010-07-01 00:00:00-04:00  1.666667  1.728000  1.351333  1.464000  123282000        0.0           0.0
3 2010-07-02 00:00:00-04:00  1.533333  1.540000  1.247333  1.280000   77097000        0.0           0.0
4 2010-07-06 00:00:00-04:00  1.333333  1.333333  1.055333  1.074000  103003500        0.0           0.0
>>> url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
>>> html_data  = requests.get(url).text
>>> soup = BeautifulSoup(html_data, 'html.parser')
>>> tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])
>>> read_html_pandas_data = pd.read_html(url)
>>> tesla_revenue = read_html_pandas_data[1]
>>> tesla_revenue.tail()
   Tesla Quarterly Revenue (Millions of US $) Tesla Quarterly Revenue (Millions of US $).1
49                                 2010-06-30                                          $28
50                                 2010-03-31                                          $21
51                                 2009-12-31                                          NaN
52                                 2009-09-30                                          $46
53                                 2009-06-30                                          $27
>>> gamestop = yf.Ticker("GME")
>>> gamestop_data = gamestop.history(period="max")
>>> gamestop_data.reset_index(inplace=True)
>>> gamestop_data.head()
                       Date      Open      High       Low     Close    Volume  Dividends  Stock Splits
0 2002-02-13 00:00:00-05:00  1.620129  1.693350  1.603296  1.691667  76216000        0.0           0.0
1 2002-02-14 00:00:00-05:00  1.712707  1.716074  1.670626  1.683251  11021600        0.0           0.0
2 2002-02-15 00:00:00-05:00  1.683250  1.687458  1.658002  1.674834   8389600        0.0           0.0
3 2002-02-19 00:00:00-05:00  1.666418  1.666418  1.578047  1.607504   7410400        0.0           0.0
4 2002-02-20 00:00:00-05:00  1.615920  1.662209  1.603296  1.662209   6892800        0.0           0.0
>>> url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
>>> html_data_2  = requests.get(url).text
>>> soup = BeautifulSoup(html_data_2, 'html.parser')
>>> gme_revenue = pd.DataFrame(columns=["Date", "Revenue"])
>>> read_html_pandas_data = pd.read_html(url)
>>> gme_revenue = read_html_pandas_data[1]
>>> gme_revenue.tail()
   GameStop Quarterly Revenue (Millions of US $) GameStop Quarterly Revenue (Millions of US $).1
57                                    2006-01-31                                          $1,667
58                                    2005-10-31                                            $534
59                                    2005-07-31                                            $416
60                                    2005-04-30                                            $475
61                                    2005-01-31                                            $709
>>> def make_graph(stock_data, revenue_data, stock):
...     fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
...     stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']
...     revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
...     fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
...     fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
...     fig.update_xaxes(title_text="Date", row=1, col=1)
...     fig.update_xaxes(title_text="Date", row=2, col=1)
...     fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
...     fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
...     fig.update_layout(showlegend=False,
...     height=900,
...     title=stock,
...     xaxis_rangeslider_visible=True)
...     fig.show()
...     from IPython.display import display, HTML
...     fig_html = fig.to_html()
...     display(HTML(fig_html))
...
>>> make_graph(tesla_data, tesla_revenue, 'Tesla')
Traceback (most recent call last):
  File "<python-input-235>", line 1, in <module>
    make_graph(tesla_data, tesla_revenue, 'Tesla')
    ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<python-input-234>", line 4, in make_graph
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
                                         ^^^^^^^^^^^^^^^^^
  File "C:\Users\Adreaan\AppData\Local\Programs\Python\Python313\Lib\site-packages\pandas\core\generic.py", line 6299, in __getattr__
    return object.__getattribute__(self, name)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^
AttributeError: 'DataFrame' object has no attribute 'Date'
>>> make_graph(gme_data, gme_revenue, 'GameStop')
Traceback (most recent call last):
  File "<python-input-236>", line 1, in <module>
    make_graph(gme_data, gme_revenue, 'GameStop')
               ^^^^^^^^
NameError: name 'gme_data' is not defined. Did you mean: 'html_data'?
>>> make_graph(gamestop_data, gme_revenue, 'GameStop')
Traceback (most recent call last):
  File "<python-input-237>", line 1, in <module>
    make_graph(gamestop_data, gme_revenue, 'GameStop')
    ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<python-input-234>", line 4, in make_graph
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
                                         ^^^^^^^^^^^^^^^^^
  File "C:\Users\Adreaan\AppData\Local\Programs\Python\Python313\Lib\site-packages\pandas\core\generic.py", line 6299, in __getattr__
    return object.__getattribute__(self, name)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^
AttributeError: 'DataFrame' object has no attribute 'Date'
>>>
>>> import yfinance as yf
>>> import pandas as pd
>>> import matplotlib.pyplot as plt
>>> import matplotlib.gridspec as gridspec
>>> import re
>>> from io import StringIO
>>> tesla_data = yf.Ticker("TSLA").history(period="max").reset_index()
>>> tesla_data['Date'] = pd.to_datetime(tesla_data['Date'])
... |2021-09-30|$13,757|
... |2021-06-30|$11,958|
... |2021-03-31|$10,389|
... |2020-12-31|$10,744|
... |2020-09-30|$8,771|
... |2020-06-30|$6,036|
... |2020-03-31|$5,985|
... |2019-12-31|$7,384|
... |2019-09-30|$6,303|
... |2019-06-30|$6,350|
... |2019-03-31|$4,541|
... |2018-12-31|$7,226|
... |2018-09-30|$6,824|
... |2018-06-30|$4,002|
... |2018-03-31|$3,409|
... |2017-12-31|$3,288|
... |2017-09-30|$2,985|
... |2017-06-30|$2,790|
... |2017-03-31|$2,696|
... |2016-12-31|$2,285|
... |2016-09-30|$2,298|
... |2016-06-30|$1,270|
... |2016-03-31|$1,147|
... |2015-12-31|$1,214|
... |2015-09-30|$937|
... |2015-06-30|$955|
... |2015-03-31|$940|
... |2014-12-31|$957|
... |2014-09-30|$852|
... |2014-06-30|$769|
... |2014-03-31|$621|
... |2013-12-31|$615|
... |2013-09-30|$431|
... |2013-06-30|$405|
... |2013-03-31|$562|
... |2012-12-31|$306|
... |2012-09-30|$50|
... |2012-06-30|$27|
... |2012-03-31|$30|
... |2011-12-31|$39|
... |2011-09-30|$58|
... |2011-06-30|$58|
... |2011-03-31|$49|
... |2010-12-31|$36|
... |2010-09-30|$31|
... |2010-06-30|$28|
... |2010-03-31|$21|
... |2009-12-31|--|
... |2009-09-30|$46|
... |2009-06-30|$27|
... '''
>>> revenue_df = pd.read_csv(StringIO(html_tesla), sep='|', skipinitialspace=True, skiprows=1, engine='python')
>>> revenue_df = revenue_df[revenue_df['Revenue'].notnull() & (revenue_df['Revenue'] != '--') & (revenue_df['Revenue'] != "")]
>>> revenue_df['Revenue'] = revenue_df['Revenue'].apply(lambda x: int(re.sub(r'[$,]', '', str(x))))
>>> revenue_df['Date'] = pd.to_datetime(revenue_df['Date'])
>>> revenue_df = revenue_df.sort_values('Date').reset_index(drop=True)
>>> tesla_revenue = revenue_df
>>> def plot_dashboard(stock_data, revenue_data, company_name):
...         plt.style.use('seaborn-v0_8-darkgrid')
...             fig = plt.figure(figsize=(14, 10))
...                 gs = gridspec.GridSpec(3, 1, height_ratios=[1, 0.2, 1])
...
  File "<python-input-277>", line 3
    fig = plt.figure(figsize=(14, 10))
IndentationError: unexpected indent
>>>     # Top: Share Price
>>>     ax0 = plt.subplot(gs[0])
  File "<python-input-279>", line 1
    ax0 = plt.subplot(gs[0])
IndentationError: unexpected indent
>>>     ax0.plot(stock_data['Date'], stock_data['Close'], color='blue', linewidth=1)
  File "<python-input-280>", line 1
    ax0.plot(stock_data['Date'], stock_data['Close'], color='blue', linewidth=1)
IndentationError: unexpected indent
>>>     ax0.set_title("Historical Share Price", fontsize=16)
  File "<python-input-281>", line 1
    ax0.set_title("Historical Share Price", fontsize=16)
IndentationError: unexpected indent
>>>     ax0.set_ylabel("Price ($US)")
  File "<python-input-282>", line 1
    ax0.set_ylabel("Price ($US)")
IndentationError: unexpected indent
>>>     ax0.set_xticklabels([])
  File "<python-input-283>", line 1
    ax0.set_xticklabels([])
IndentationError: unexpected indent
>>>
>>>     # Middle: Range Slider (duplicate price plot for effect)
>>>     ax1 = plt.subplot(gs[1], sharex=ax0)
  File "<python-input-286>", line 1
    ax1 = plt.subplot(gs[1], sharex=ax0)
IndentationError: unexpected indent
>>>     ax1.plot(stock_data['Date'], stock_data['Close'], color='blue', linewidth=1)
  File "<python-input-287>", line 1
    ax1.plot(stock_data['Date'], stock_data['Close'], color='blue', linewidth=1)
IndentationError: unexpected indent
>>>     ax1.set_ylabel("")
  File "<python-input-288>", line 1
    ax1.set_ylabel("")
IndentationError: unexpected indent
>>>     ax1.set_yticklabels([])
  File "<python-input-289>", line 1
    ax1.set_yticklabels([])
IndentationError: unexpected indent
>>>     ax1.set_xticklabels([])
  File "<python-input-290>", line 1
    ax1.set_xticklabels([])
IndentationError: unexpected indent
>>>
>>>     # Bottom: Revenue
>>>     ax2 = plt.subplot(gs[2])
  File "<python-input-293>", line 1
    ax2 = plt.subplot(gs[2])
IndentationError: unexpected indent
>>>     ax2.plot(revenue_data['Date'], revenue_data['Revenue'], color='firebrick', linewidth=2)
  File "<python-input-294>", line 1
    ax2.plot(revenue_data['Date'], revenue_data['Revenue'], color='firebrick', linewidth=2)
IndentationError: unexpected indent
>>>     ax2.set_title("Historical Revenue", fontsize=16)
  File "<python-input-295>", line 1
    ax2.set_title("Historical Revenue", fontsize=16)
IndentationError: unexpected indent
>>>     ax2.set_xlabel("Date")
  File "<python-input-296>", line 1
    ax2.set_xlabel("Date")
IndentationError: unexpected indent
>>>     ax2.set_ylabel("Revenue ($US Millions)")
  File "<python-input-297>", line 1
    ax2.set_ylabel("Revenue ($US Millions)")
IndentationError: unexpected indent
>>>
>>>
>>>     fig.suptitle(company_name, fontsize=18, x=0.1, y=0.98, ha='left')
  File "<python-input-300>", line 1
    fig.suptitle(company_name, fontsize=18, x=0.1, y=0.98, ha='left')
IndentationError: unexpected indent
>>>     plt.tight_layout(rect=[0, 0, 1, 0.97])
  File "<python-input-301>", line 1
    plt.tight_layout(rect=[0, 0, 1, 0.97])
IndentationError: unexpected indent
>>>     plt.show()def plot_dashboard(stock_data, revenue_data, company_name):
  File "<python-input-302>", line 1
    plt.show()def plot_dashboard(stock_data, revenue_data, company_name):
IndentationError: unexpected indent
>>> def plot_dashboard(stock_data, revenue_data, company_name):
...         plt.style.use('seaborn-v0_8-darkgrid')
...         fig = plt.figure(figsize=(14, 10)
...         gs = gridspec.GridSpec(3, 1, height_ratios=[1, 0.2, 1])
...         ax0 = plt.subplot(gs[0])
...         ax0.plot(stock_data['Date'], stock_data['Close'], color='blue', linewidth=1)
...         ax0.set_title("Historical Share Price", fontsize=16)
...         ax0.set_ylabel("Price ($US)")
...         ax0.set_xticklabels([])
...         ax1 = plt.subplot(gs[1], sharex=ax0)
...         ax1.plot(stock_data['Date'], stock_data['Close'], color='blue', linewidth=1)
...         ax1.set_ylabel("")
...         ax1.set_yticklabels([])
...         ax1.set_xticklabels([])
...         ax2 = plt.subplot(gs[2])
...         ax2.plot(revenue_data['Date'], revenue_data['Revenue'], color='firebrick', linewidth=2)
...         ax2.set_title("Historical Revenue", fontsize=16)
...         ax2.set_xlabel("Date")
...         ax2.set_ylabel("Revenue ($US Millions)")
...         fig.suptitle(company_name, fontsize=18, x=0.1, y=0.98, ha='left')
...         plt.tight_layout(rect=[0, 0, 1, 0.97]
...         plt.show()
...
  File "<python-input-303>", line 3
    fig = plt.figure(figsize=(14, 10)
                             ^^^^^^^^
SyntaxError: invalid syntax. Perhaps you forgot a comma?
>>> def plot_dashboard(stock_data, revenue_data, company_name):
...         plt.style.use('seaborn-v0_8-darkgrid')
...         fig = plt.figure(figsize=(14, 10))
...         gs = gridspec.GridSpec(3, 1, height_ratios=[1, 0.2, 1])
...         ax0 = plt.subplot(gs[0])
...         ax0.plot(stock_data['Date'], stock_data['Close'], color='blue', linewidth=1)
...         ax0.set_title("Historical Share Price", fontsize=16)
...         ax0.set_ylabel("Price ($US)")
...         ax0.set_xticklabels([])
...         ax1 = plt.subplot(gs[1], sharex=ax0)
...         ax1.plot(stock_data['Date'], stock_data['Close'], color='blue', linewidth=1)
...         ax1.set_ylabel("")
...         ax1.set_yticklabels([])
...         ax1.set_xticklabels([])
...         ax2 = plt.subplot(gs[2])
...         ax2.plot(revenue_data['Date'], revenue_data['Revenue'], color='firebrick', linewidth=2)
...         ax2.set_title("Historical Revenue", fontsize=16)
...         ax2.set_xlabel("Date")
...         ax2.set_ylabel("Revenue ($US Millions)")
...         fig.suptitle(company_name, fontsize=18, x=0.1, y=0.98, ha='left')
...         plt.tight_layout(rect=[0, 0, 1, 0.97])
...         plt.show()
...
>>> plot_dashboard(tesla_data, tesla_revenue, "Tesla")
>>> gme_data = yf.Ticker("GME").history(period="max").reset_index()gme_data = yf.Ticker("GME").history(period="max").reset_index()
  File "<python-input-306>", line 1
    gme_data = yf.Ticker("GME").history(period="max").reset_index()gme_data = yf.Ticker("GME").history(period="max").reset_index()
                                                                   ^^^^^^^^
SyntaxError: invalid syntax
>>> gme_data = yf.Ticker("GME").history(period="max").reset_index()gme_data = yf.Ticker("GME").history(period="max").reset_index()
  File "<python-input-307>", line 1
    gme_data = yf.Ticker("GME").history(period="max").reset_index()gme_data = yf.Ticker("GME").history(period="max").reset_index()
                                                                   ^^^^^^^^
SyntaxError: invalid syntax
>>>
>>> gme_data = yf.Ticker("GME").history(period="max").reset_index()
>>> gme_data['Date'] = pd.to_datetime(gme_data['Date'])
... |2021-04-30|$1,277|
... |2021-01-31|$2,122|
... |2020-10-31|$1,005|
... |2020-07-31|$942|
... |2020-04-30|$1,021|
... |2020-01-31|$2,194|
... |2019-10-31|$1,439|
... |2019-07-31|$1,286|
... |2019-04-30|$1,548|
... |2019-01-31|$3,063|
... |2018-10-31|$1,935|
... |2018-07-31|$1,501|
... |2018-04-30|$1,786|
... |2018-01-31|$2,825|
... |2017-10-31|$1,989|
... |2017-07-31|$1,688|
... |2017-04-30|$2,046|
... |2017-01-31|$2,403|
... |2016-10-31|$1,959|
... |2016-07-31|$1,632|
... |2016-04-30|$1,972|
... |2016-01-31|$3,525|
... |2015-10-31|$2,016|
... |2015-07-31|$1,762|
... |2015-04-30|$2,061|
... |2015-01-31|$3,476|
... |2014-10-31|$2,092|
... |2014-07-31|$1,731|
... |2014-04-30|$1,996|
... |2014-01-31|$3,684|
... |2013-10-31|$2,107|
... |2013-07-31|$1,384|
... |2013-04-30|$1,865|
... |2013-01-31|$3,562|
... |2012-10-31|$1,773|
... |2012-07-31|$1,550|
... |2012-04-30|$2,002|
... |2012-01-31|$3,579|
... |2011-10-31|$1,947|
... |2011-07-31|$1,744|
... |2011-04-30|$2,281|
... |2011-01-31|$3,693|
... |2010-10-31|$1,899|
... |2010-07-31|$1,799|
... |2010-04-30|$2,083|
... |2010-01-31|$3,524|
... |2009-10-31|$1,835|
... |2009-07-31|$1,739|
... |2009-04-30|$1,981|
... |2009-01-31|$3,492|
... '''
>>> revenue_df_gme = pd.read_csv(StringIO(html_gme), sep='|', skipinitialspace=True, skiprows=1, engine='python')
>>> revenue_df_gme = revenue_df_gme[revenue_df_gme['Revenue'].notnull() & (revenue_df_gme['Revenue'] != '--') & (revenue_df_gme['Revenue'] != "")]
>>> revenue_df_gme['Revenue'] = revenue_df_gme['Revenue'].apply(lambda x: int(re.sub(r'[$,]', '', str(x))))
>>> revenue_df_gme['Date'] = pd.to_datetime(revenue_df_gme['Date'])
>>> revenue_df_gme = revenue_df_gme.sort_values('Date').reset_index(drop=True)
>>> gme_revenue = revenue_df_gme
>>> plot_dashboard(gme_data, gme_revenue, "GameStop")
